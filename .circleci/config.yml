# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:

  Build:
    docker:
      - image: ghcr.io/andresbott/aem-guides-wknd/ci-image:87d90b85d9e3
        auth:
          username: andresbott
          password: $GH_CONTAINER_RO_EXP_07_24
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-{{ checksum "pom.xml" }}

      - run:
          name: "build project"
          command: |
            mkdir -p workspace/all
            mkdir -p workspace/dispatcher
            mvn clean install

      - run:
          name: "copy build artifacts"
          command: |
            cp -r all/target/*.zip workspace/all
            cp -r dispatcher/target/*.zip workspace/dispatcher

      - persist_to_workspace:
          root: workspace
          paths:
            - all
            - dispatcher

      - save_cache:
          key: maven-{{ checksum "pom.xml" }}
          paths:
            - /home/circleci/.m2/repository/
  RDE-reset:
    docker:
      - image: ghcr.io/andresbott/aem-guides-wknd/ci-image:87d90b85d9e3
        auth:
          username: andresbott
          password: $GH_CONTAINER_RO_EXP_07_24
    steps:
      - run:
          name: "aio login"
          command: |
            echo "${SERVICE_ACCOUNT_PRIVATE_KEY_B64}" | base64 -d > private.key
            
            # prevent aio to ask questions
            aio telemetry off 
            
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.client_id "${SERVICE_ACCOUNT_CLIENT_ID}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.client_secret "${SERVICE_ACCOUNT_CLIENT_SECRET}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.technical_account_id "${SERVICE_ACCOUNT_TECH_ACCOUNT_ID}"
            aio config:set  --json ims.contexts.aio-cli-plugin-cloudmanager.meta_scopes '["ent_cloudmgr_sdk"]'
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.ims_org_id "${SERVICE_ACCOUNT_ORG_ID}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.private_key  private.key --file
            
            aio auth login --ctx=aio-cli-plugin-cloudmanager > login.log
            
            # configure coordinates
            aio config:set cloudmanager_orgid  "${SERVICE_ACCOUNT_ORG_ID}"
            aio config:set cloudmanager_programid "${PROGRAM_ID}" 
            aio config:set cloudmanager_environmentid "${ENVIRONMENT_ID}"

      - run:
          name: "reset the RDE"
          no_output_timeout: 15m
          command: |
            time aio aem:rde:reset

  RDE-install:
    docker:
      - image: ghcr.io/andresbott/aem-guides-wknd/ci-image:87d90b85d9e3
        auth:
          username: andresbott
          password: $GH_CONTAINER_RO_EXP_07_24
    steps:
      - checkout
      - run:
          name: "aio login"
          command: |
            echo "${SERVICE_ACCOUNT_PRIVATE_KEY_B64}" | base64 -d > private.key
            
            # prevent aio to ask questions
            aio telemetry off 
            
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.client_id "${SERVICE_ACCOUNT_CLIENT_ID}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.client_secret "${SERVICE_ACCOUNT_CLIENT_SECRET}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.technical_account_id "${SERVICE_ACCOUNT_TECH_ACCOUNT_ID}"
            aio config:set  --json ims.contexts.aio-cli-plugin-cloudmanager.meta_scopes '["ent_cloudmgr_sdk"]'
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.ims_org_id "${SERVICE_ACCOUNT_ORG_ID}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.private_key  private.key --file
            
            aio auth login --ctx=aio-cli-plugin-cloudmanager > login.log
            
            # configure coordinates
            aio config:set cloudmanager_orgid  "${SERVICE_ACCOUNT_ORG_ID}"
            aio config:set cloudmanager_programid "${PROGRAM_ID}" 
            aio config:set cloudmanager_environmentid "${ENVIRONMENT_ID}"

      - run:
          name: "setup new admin user on RDE"
          command: |
            # Note: repoinit has some limitations with special characters in password, e.g. "+" sign
            .circleci/create-user-osgi-cfg.sh -u "${AEM_USER}" -p "${AEM_PASSWORD}" -q true
            
            aio aem:rde:install -t osgi-config org.apache.sling.jcr.repoinit.RepositoryInitializer~testadmin-user-add.cfg.json
            
            # delete the osgi config, this is fine since the script contained within the config is not reverterd
            aio aem:rde:delete org.apache.sling.jcr.repoinit.RepositoryInitializer~testadmin-user-add    

      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: "install project on RDE"
          command: |
            set -e
            ALL_FILE=$(ls /tmp/workspace/all/ | grep zip ) && aio aem:rde:install -t content-package "/tmp/workspace/all/${ALL_FILE}"
            DISP_FILE=$(ls /tmp/workspace/dispatcher/ | grep zip ) && aio aem:rde:install -t dispatcher-config "/tmp/workspace/dispatcher/${DISP_FILE}"

            # todo: we can check the status of the installation with "aio aem:rde:status"
            echo "waiting 20s to finish rde install"
            sleep 20    

  Customer-ITs:
    docker:
      - image: ghcr.io/andresbott/aem-guides-wknd/ci-image:87d90b85d9e3
        auth:
          username: andresbott
          password: $GH_CONTAINER_RO_EXP_07_24
    steps:
      - checkout
      - restore_cache:
          keys:
            - maven-{{ checksum "pom.xml" }}
      - run:
          name: "Run Local Integration Tests"
          command: |
            cd it.tests 
            mvn clean verify \
            -Plocal \
            -Dit.author.url="${AUTHOR_URL}" \
            -Dit.author.user="${AEM_USER}" \
            -Dit.author.password="${AEM_PASSWORD}" \
            -Dit.publish.url="${PUBLISH_URL}" \
            -Dit.publish.user="${AEM_USER}" \
            -Dit.publish.password="${AEM_PASSWORD}" \
            -Dmaven.javadoc.skip=true \
            -Dmaven.surefire.debug


  Product-tests:
    docker:
      - image: ghcr.io/andresbott/aem-guides-wknd/ci-image:87d90b85d9e3
        auth:
          username: andresbott
          password: $GH_CONTAINER_RO_EXP_07_24
    steps:
      - run:
          name: "Eaas login"
          command: |
            echo "${SERVICE_ACCOUNT_PRIVATE_KEY_B64}" | base64 -d > private.key
            eaas login integration  \
              --organization "${SERVICE_ACCOUNT_ORG_ID}" \
              --clientId "${SERVICE_ACCOUNT_CLIENT_ID}" \
              --secret "${SERVICE_ACCOUNT_CLIENT_SECRET}" \
              --privateKey private.key \
              --accountId "${SERVICE_ACCOUNT_TECH_ACCOUNT_ID}"            
            eaas health
      - run:
          name: "Generate the IT payload"
          command: |         
            eaas task it generate \
            -a "${AUTHOR_URL}" -u admin -p "${AEM_PASSWORD}" \
            -A "${PUBLISH_URL}" -U admin -P "${AEM_PASSWORD}" \
            -m "com.adobe.cq.cloud:com.adobe.cq.cloud.testing.it.smoke:0.19.0"

      - run:
          name: "Run the Product test"
          command: |
            eaas task it run it-task-payload.json 

      - store_artifacts:
          path: TODO

  Cleanup:
    # This step removes the test user that we created in a previous step
    docker:
      - image: ghcr.io/andresbott/aem-guides-wknd/ci-image:87d90b85d9e3
        auth:
          username: andresbott
          password: $GH_CONTAINER_RO_EXP_07_24
    steps:
      - checkout
      - run:
          name: "Install aio-cli"
          command: |
            sudo npm install -g @adobe/aio-cli
            aio plugins:install @adobe/aio-cli-plugin-cloudmanager
            aio plugins:install @adobe/aio-cli-plugin-aem-rde
            aio plugins:update
      - run:
          name: "aio login"
          command: |
            echo "${SERVICE_ACCOUNT_PRIVATE_KEY_B64}" | base64 -d > private.key
            
            # prevent aio to ask questions
            aio telemetry off 
            
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.client_id "${SERVICE_ACCOUNT_CLIENT_ID}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.client_secret "${SERVICE_ACCOUNT_CLIENT_SECRET}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.technical_account_id "${SERVICE_ACCOUNT_TECH_ACCOUNT_ID}"
            aio config:set  --json ims.contexts.aio-cli-plugin-cloudmanager.meta_scopes '["ent_cloudmgr_sdk"]'
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.ims_org_id "${SERVICE_ACCOUNT_ORG_ID}"
            aio config:set ims.contexts.aio-cli-plugin-cloudmanager.private_key  private.key --file
            
            aio auth login --ctx=aio-cli-plugin-cloudmanager > login.log
            
            # configure coordinates
            aio config:set cloudmanager_orgid  "${SERVICE_ACCOUNT_ORG_ID}"
            aio config:set cloudmanager_programid "${PROGRAM_ID}" 
            aio config:set cloudmanager_environmentid "${ENVIRONMENT_ID}"     

      - run:
          name: Uninstall the user from the RDE
          command: |
            # Note: repoinit has some limitations with special characters in password, e.g. "+" sign
            .circleci/create-user-osgi-cfg.sh -u "${AEM_USER}" -p "${AEM_PASSWORD}" -q true
            
            aio aem:rde:install -t osgi-config org.apache.sling.jcr.repoinit.RepositoryInitializer~testadmin-user-remove.cfg.json
            aio aem:rde:delete org.apache.sling.jcr.repoinit.RepositoryInitializer~testadmin-user-remove


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  PR-validation:
    jobs:
      - Build
      - RDE-reset
      - RDE-install:
          requires:
            - Build
            - RDE-reset

      - Customer-ITs:
          requires:
            - RDE-install
      - Product-tests:
          requires:
            - RDE-install
      - Cleanup:
          requires:
            - Product-tests
            - Customer-ITs